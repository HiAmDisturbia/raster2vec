# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Raster2Vec
                                 A QGIS plugin
 This plugin takes a raster image, and converts it as a vectorial image
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-29
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Paul-Alexandre Nasr
        email                : paul_alexandre99@yahoo.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .raster2vec_dialog import Raster2VecDialog
import os.path
import numpy as np
from osgeo import gdal

class Raster2Vec:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Raster2Vec_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Raster to Vector')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Raster2Vec', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/raster2vec/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Raster to Vector'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Raster to Vector'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            # Code below is read when the plugin is launched for the first time
            self.first_start = False
            self.dlg = Raster2VecDialog()
            self.dlg.open_output_vector.clicked.connect(self.select_output_file)
            self.dlg.open_input_raster.clicked.connect(self.select_output_file)
		
        alllayers = QgsProject.instance().mapLayers().values()
#        alllayers.sort()
        allrasterlayers = []
        for elt in alllayers:
            if elt.type() == QgsMapLayer.RasterLayer:
                allrasterlayers.append(elt)
        allrasterlayers_paths = [layer.source() for layer in allrasterlayers]
        
        self.dlg.input_raster2.clear()
        self.dlg.raster_band.clear()
        self.dlg.input_weight_raster2.clear()
        self.dlg.weight_raster_band.clear()
        self.dlg.line_weight_value.clear()
        self.dlg.line_output_vector.clear()
        self.dlg.line_output_layer_name.clear()
        
        self.dlg.input_raster2.addItems([layer.name() for layer in allrasterlayers])
        self.dlg.input_weight_raster2.addItems([layer.name() for layer in allrasterlayers])
        
#        raster_tri = sorted(allrasterlayers)
        allrasterlayers.sort
        print(allrasterlayers)
        print([elt.name() for elt in allrasterlayers])
        
        def layer_field_raster():
            """
            Adds the band values of the raster selected in Input Raster
            """
            # Identify selected layer by its index
            selectedLayerIndex = self.dlg.input_raster2.currentIndex()
            selectedLayer = allrasterlayers[selectedLayerIndex]
#            print(selectedLayer.name())
            # Counts the number of bands of the current layer, then adds the bands on the raster band comboBox
            amount_of_bands = selectedLayer.bandCount()
            self.dlg.raster_band.clear()
            self.dlg.raster_band.addItems([selectedLayer.bandName(i) for i in range(amount_of_bands)])
    
        def layer_field_wraster():
            """
            Adds the band values of the raster selected in Weight Raster
            """
            # Same comments as above
            selectedLayerIndex = self.dlg.input_weight_raster2.currentIndex()
            selectedLayer = allrasterlayers[selectedLayerIndex]
            amount_of_bands = selectedLayer.bandCount()
            self.dlg.weight_raster_band.clear()            
            self.dlg.weight_raster_band.addItems([selectedLayer.bandName(i) for i in range(amount_of_bands)])

        # Everytime the user selects a raster, the band values will change
        self.dlg.input_raster2.currentIndexChanged.connect(layer_field_raster)
        self.dlg.input_weight_raster2.currentIndexChanged.connect(layer_field_wraster)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and substitute with your code.
            weight = self.dlg.line_weight_value.text()
            output_vector = self.dlg.line_output_vector.text()
            output_layer_name = self.dlg.line_output_layer_name.text()
            
            if weight == '0' or weight is None:
                print(weight)
                weight = self.dlg.line_weight_value.setText('1')
                weight = float(self.dlg.line_weight_value.text())
            
            print(weight)
            
#            print(alllayers)
#            print(allrasterlayers)
#            print(allrasterlayers_paths)
            selectedLayerIndex = self.dlg.input_raster2.currentIndex()
#            print(selectedLayerIndex)
            selectedLayer = allrasterlayers[selectedLayerIndex]
            current_path_raster = selectedLayer.source()
            selectedLayer_width = selectedLayer.width()
            selectedLayer_height = selectedLayer.height()
            
#            selectedLayerIndex2 = self.dlg.input_weight_raster.currentIndex()
#            selectedLayer2 = allrasterlayers[selectedLayerIndex2]
#            current_path_wraster = selectedLayer2.source()
            
#            shplayer = QgsVectorLayer("D:/ENSG/A_New_Era_G2/A_Stages/Projet_Stage/codes/shp_modifies/COMMUNE_Chelles.shp", "testlayer_shp", "ogr")
#            pr = shplayer.dataProvider()
#            if not shplayer.isValid():
#                print("Layer failed to load")
#            else:
#                print("Layer loaded successfuly")
            
            shplayer = QgsVectorLayer("Polygon", "temporary_polygon", "memory")
            provider = shplayer.dataProvider()
            shplayer.startEditing()
            
            provider.addAttributes([QgsField("id", QVariant.Int), QgsField("value", QVariant.Double), QgsField("name", QVariant.String)])
                
            poly = QgsFeature()
            pts = [QgsPointXY(0, 0), QgsPointXY(0, selectedLayer_height), QgsPointXY(selectedLayer_width, selectedLayer_height), QgsPointXY(selectedLayer_width, 0)]
            poly.setGeometry(QgsGeometry.fromPolygonXY([pts]))
            poly.setAttributes([0, 3, "value"])
            provider.addFeatures([poly])
            # Commit changes
            shplayer.updateExtents()
            # Show in project
            QgsProject.instance().addMapLayer(shplayer)
            
            print("No. fields:", len(provider.fields()))
            print("No. features:", provider.featureCount())
            e = shplayer.extent()
            print("Extent:", e.xMinimum(), e.yMinimum(), e.xMaximum(), e.yMaximum())
             
            for f in shplayer.getFeatures():
                print("Feature:", f.id(), f.attributes(), f.geometry().asPolygon())
            
            dataset = gdal.Open(current_path_raster)
            band1 = np.array(dataset.GetRasterBand(1).ReadAsArray())
#            band2 = np.array(dataset.GetRasterBand(2).ReadAsArray())
#            band3 = np.array(dataset.GetRasterBand(3).ReadAsArray())
            moy = np.mean(band1)
            avrg = np.average(band1)
            
#            print(selectedLayer.name())
#            print(band1)
#            print(band2)
#            print(band3)
#            print(moy)
#            print(avrg)

            #print("Dimension of the selected raster: ", current_layer.width(), current_layer.height())
#            self.iface.messageBar().pushMessage("Success", "Output file written at " + filename, level=Qgis.Success, duration=3)
            pass

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file: ", "", 'Image file (*.jpg, *.png, *.tif)')
        self.dlg.lineEdit.setText(filename)
        
    