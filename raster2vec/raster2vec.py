# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Raster2Vec
                                 A QGIS plugin
 This plugin takes a raster image, and converts it as a vectorial image
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-29
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Paul-Alexandre Nasr
        email                : paul_alexandre99@yahoo.fr
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .raster2vec_dialog import Raster2VecDialog
import os.path
import numpy as np
from osgeo import gdal
import sys

sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), "./parallel-cut-pursuit/python/wrappers"))
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), "./multilabel-potrace/python/wrappers"))

from multilabel_potrace_shp import multilabel_potrace_shp
from cp_kmpp_d0_dist import cp_kmpp_d0_dist
  
def compute_grid(lin, col, bin_obs=None):
    """
    Compute the Astar representation of a 8-neighborhood,grid graph
    INPUT:
    lin, col = size of the grid
    OUTPUT:
    first_edge, adj_vertices = Astar graph
    edgeweight = associated edge weight
    """
    A = np.arange(lin*col).reshape(lin,col)
    # down arrow
    source  = A[:-1,:]
    target   = A[1:,:]
    down = np.stack((source.flatten(), target.flatten()),0)
    wdown = np.ones(down.shape[1])
    # right arrow
    source  = A[:,:-1]
    target  = A[:,1:]
    right = np.stack((source.flatten(), target.flatten()),0)
    wright = np.ones(right.shape[1])
    # down-right arrow
    source = A[:-1,:-1]
    target  = A[1:,1:]
    down_right = np.stack((source.flatten(), target.flatten()),0)
    wdown_right = 1/np.sqrt(2)* np.ones(down_right.shape[1])
    #weighting, see "Computing Geodesics and Minimal Surfaces via Graph Cuts", Boyjob & Kolmogorov 2003
    # up-right arrow
    source = A[1:,:-1]
    target = A[:-1,1:]
    up_right = np.stack((source.flatten(), target.flatten()),0)
    wup_right = 1/np.sqrt(2)* np.ones(up_right.shape[1])
    #mergeing
    T = np.concatenate((right, down, down_right, up_right), axis=1)
    weights = np.concatenate((wright, wdown, wdown_right, wup_right), axis=0)
    #formatting
    reorder = T[0,:].argsort()
    T = T[:,reorder]
    weights = weights[reorder]
    
    if bin_obs is not None:
        weights[bin_obs[T[0,:]] != bin_obs[T[1,:]]] = 0
    
    v = np.concatenate(([0],np.where((T[0,:-1]==T[0,1:])==False)[0]+1,[T.shape[1], T.shape[1]]))
    first_edge = np.array(v, dtype='uint32')
    adj_vertices = np.array(T[1,:],dtype='uint32') 
    return first_edge, adj_vertices, weights
    
def signed_area(pr2):
     """Return the signed area enclosed by a ring using the linear time
     algorithm at http://www.cgafaq.info/wiki/Polygon_Area. A value >= 0
     indicates a counter-clockwise oriented ring."""
     xs, ys = map(list, zip(*pr2))
     if len(xs) < 2:
         return 0
     xs.append(xs[1])
     ys.append(ys[1])
     return sum(xs[i]*(ys[i+1]-ys[i-1]) for i in range(1, len(pr2)))/2.0

class Raster2Vec:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Raster2Vec_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Raster to Vector')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Raster2Vec', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/raster2vec/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Raster to Vector'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Raster to Vector'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the code below."""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            # Code below is read when the plugin is launched for the first time
            self.first_start = False
            self.dlg = Raster2VecDialog()
            self.dlg.open_output_vector.clicked.connect(self.select_output_file)
            self.dlg.open_input_raster.clicked.connect(self.select_output_file)
		
        # We get the values of all the layers. Then we only select layers of raster type.
        alllayers = QgsProject.instance().mapLayers().values()
        allrasterlayers = []
        for elt in alllayers:
            if elt.type() == QgsMapLayer.RasterLayer:
                allrasterlayers.append(elt)
        allrasterlayers_paths = [layer.source() for layer in allrasterlayers]
        #We clear all values on each widget of the plug-in interface, so it technically is a reset of the values inside each widget.
        self.dlg.input_raster.clear()
        self.dlg.raster_band.clear()
        self.dlg.input_weight_raster.clear()
        self.dlg.weight_raster_band.clear()
        self.dlg.line_weight_value.clear()
        self.dlg.line_output_vector.clear()
        self.dlg.line_output_layer_name.clear()
        self.dlg.input_raster.addItems([layer.name() for layer in allrasterlayers])
        
        def layer_field_raster():
            """
            Adds the band values of the raster selected in Input Raster
            """
            print('selected')
            # Identify selected layer by its index
            selectedLayerIndex = self.dlg.input_raster.currentIndex()
            selectedLayer = allrasterlayers[selectedLayerIndex]
            # Counts the number of bands of the current layer, then adds the bands on the raster band comboBox
            amount_of_bands = selectedLayer.bandCount()
            self.dlg.raster_band.clear()
            self.dlg.raster_band.addItems([selectedLayer.bandName(i) for i in range(amount_of_bands)])
    
        def layer_field_wraster():
            """
            Adds the band values of the raster selected in Weight Raster
            """
            # Same comments as the ones in the above function.
            selectedLayerIndex = self.dlg.input_weight_raster.currentIndex()
            selectedLayer = allrasterlayers[selectedLayerIndex]
            amount_of_bands = selectedLayer.bandCount()
            self.dlg.weight_raster_band.clear()            
            self.dlg.weight_raster_band.addItems([selectedLayer.bandName(i) for i in range(amount_of_bands)])
            
        layer_field_raster()
        layer_field_wraster()
        
        allrasterlayers.sort
        
        # Everytime the user selects a raster, the band values will change
        self.dlg.input_raster.currentIndexChanged.connect(layer_field_raster)
        self.dlg.input_weight_raster.currentIndexChanged.connect(layer_field_wraster)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        # See if OK was pressed
        weight = 0
        if self.dlg.exec_():
            # This is where we take the inputs done by the user.
            try:
                weight = float(self.dlg.line_weight_value.text())
            except ValueError:
                print("Default value for regulirization strength")
                weight = 1.0
            output_vector = self.dlg.line_output_vector.text()
            output_layer_name = self.dlg.line_output_layer_name.text()

            #We get the selected layer, and its source, width, height, crs, and band number. They will be used later in the code
            selectedLayerIndex = self.dlg.input_raster.currentIndex()
            selectedLayer = allrasterlayers[selectedLayerIndex]
            current_path_raster = selectedLayer.source()
            selectedLayer_width = selectedLayer.width()
            selectedLayer_height = selectedLayer.height()
            selectedLayer_crs = selectedLayer.crs()
            selectedBandIndex = self.dlg.raster_band.currentIndex()
            
            #Creation of a new shapefile of a polygon type, that will take the size of the bounding box of the selected raster.
            shplayer = QgsVectorLayer("Polygon", "temporary_polygon", "memory")
            shplayer.setCrs(selectedLayer_crs)
            provider = shplayer.dataProvider() #This variable is used to give all the data to she shapefile
            
            provider.addAttributes([QgsField("id", QVariant.Int), QgsField("value", QVariant.Double)]) #Adding 2 columns to the provider.
            
            #We get the coordinates of the bounding box (extent)
            ext = selectedLayer.extent()
            x_min = ext.xMinimum()
            x_max = ext.xMaximum()
            y_min = ext.yMinimum()
            y_max = ext.yMaximum()
            print("Coordinates: ", x_min, x_max, y_min, y_max)
            
            #We create the array of the raster image, depending on the band number selected by the user.
            dataset = gdal.Open(current_path_raster)
            obs = np.array(dataset.GetRasterBand(selectedBandIndex + 1).ReadAsArray())
            number_rows = obs.shape[0]
            number_columns = obs.shape[1]

            if obs.dtype != 'float32':
                obs = band1.astype('float32')
                           
            print("Number of rows for raster: ", number_rows)
            print("Number of columns for raster: ", number_columns)
                      
            #Length and height of the raster.            
            true_size_x = x_max-x_min
            true_size_y = y_max-y_min
            lin = obs.shape[0]
            col = obs.shape[1]
            delta_x = true_size_x/col
            delta_y = true_size_y/lin
            
            obs = obs.reshape((lin*col,1)).T
            nodata = obs!=obs
            obs[nodata] = 0.0
            
            first_edge, adj_vertices, edg_weights = compute_grid(lin, col, (obs==0).flatten())
            edg_weights = edg_weights.astype(obs.dtype)
            
            vert_weights = np.ones((lin*col), dtype='f4')
            
            reg_strength = weight * np.std(obs)**2
            print(obs.mean())
            print(edg_weights.mean())
            print(reg_strength)
            print("Starting Cut Pursuit")
            Comp, rX, dump = cp_kmpp_d0_dist(1, obs , first_edge, adj_vertices, edge_weights = reg_strength * edg_weights, vert_weights = vert_weights, cp_it_max=8, cp_dif_tol = 1e-3)
            print('cp done')
            bb, nparts, npoints, parts, points = multilabel_potrace_shp(col, lin, Comp, rX.shape[1])
            print('potrace done')
            
            n_comp = nparts.shape[0]
            index_parts = 0
            index_points = 0
   
            for i_comp in range(n_comp):
                #print("!")
                #print(i_comp)
                poly = QgsFeature()
                poly.setAttributes([i_comp, float(rX[0, i_comp])])
                vertices = []   #Liste de liste de QgsPointXY
                #print(i_comp)
                #print(len(vertices))
                pivots = np.append(index_points +parts[index_parts:index_parts + nparts[i_comp]], index_points + npoints[i_comp])
                index_parts = index_parts + nparts[i_comp]
                index_points = index_points + npoints[i_comp]
                for i_parts in range(nparts[i_comp]):
                    contour = range(pivots[i_parts], pivots[i_parts+1])
                    contourXY = [QgsPointXY((x_min + (col - points[1,i]) * delta_y), (y_min + (lin - points[0,i]) * delta_x)) for i in contour]#reversed(contour)]
                    if i_parts == 0 or signed_area(contourXY) < 0 :
                        vertices.append(contourXY)                   
                print("%d / %d, : %d" % (i_comp, n_comp, nparts[i_comp]))
                #print(len(vertices))
                poly.setGeometry(QgsGeometry.fromPolygonXY(vertices))
                provider.addFeatures([poly])
                #break
            
            # Commit changes
            shplayer.updateFields()
            shplayer.updateExtents()
            # Show in project
            QgsProject.instance().addMapLayer(shplayer)
            
            print("No. fields:", len(provider.fields()))
            print("No. features:", provider.featureCount())
            e = shplayer.extent()
            print("Extent:", e.xMinimum(), e.yMinimum(), e.xMaximum(), e.yMaximum())
            
#            pass

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file: ", "", 'Image file (*.jpg, *.png, *.tif)')
        self.dlg.lineEdit.setText(filename)